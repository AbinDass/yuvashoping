<%- include('partials/Header.ejs') -%>
<div class="col-12 grid-margin stretch-card" style="width: 60%; margin-left: 10%">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Add Products</h4>
            <p class="card-description">add your Products here</p>
            <form class="forms-sample" action="/admin/product" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="">title</label>
                    <input type="text" class="form-control" placeholder="Name" name="title" />
                </div>

                <div class="form-group">
                    <label for="">brand</label>
                    <input type="text" class="form-control" placeholder="BrandName" name="brand" />
                </div>

                <div class="form-group">
                    <label for="">price</label>
                    <input type="number" class="form-control" placeholder="Price" name="price" />
                </div>
                
                <div class="form-group">
                    <label for="">stock</label>
                    <input type="number" class="form-control" placeholder="availability" name="stock" />
                </div>
                
                <div class="form-group">
                    <label for="">category</label>
                    <select class="form-control" name="category">
                        <% for(let i=0;i<category.length;i++) {%>
                            <option value="<%- category[i]._id %>"><%- category[i].categoryname %></option>
                            <!-- <option>category2</option> -->
                            <%}%>
                        </select>
                    </div>
                    <!-- img3 -->
                    <div class="form-group">
                        <label>Image 3</label>
                        <input type="file" name="image" class="file-upload-default" multiple />
                        <div class="input-group col-xs-12">
                            <input
                                class="form-control file-upload-info"
                                placeholder="Upload Image"
                                type="file"
                                accept="image/jpeg,image/gif,image/png,image/x-eps"
                                id="id_image"
                                name="image"
                                multiple
                            />
                        </div>
                    
                        <!-- <div class="form-group" style="    margin-top: 15px;">
                            <label for="name" class="col-sm-3 control-label"  id="images"  style="   font-weight: bold;">UPLOAD IMAGES -(jpg/png):</label>
                            <div class="col-sm-3">
                              <label class="control-label small" for="file_img">image 1:</label> 
                              <input
                               class="block w-full pr-20 mt-1 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input"
                               type="file" id="id_image"
                               name="image" multiple>
                            </div> -->
                    
                            <div id="image-box" class="image-container h-50 w-50"></div>
                           <button
                            class="btn btn-outline-info"
                            id="crop-btn"
                            style="width: 100%; margin-top: 10px; display: none"
                            type="button">
                            Crop
                        </button>
                    </div>
                    <!-- img3ends -->
                    <!-- img2 -->
                                <div class="form-group">
                                    <label>Image 2</label>
                                    <input type="file" name="image" class="file-upload-default" multiple />
                                    <div class="input-group col-xs-12">
                                        <input
                                            class="form-control file-upload-info"
                                            placeholder="Upload Image"
                                            type="file"
                                            accept="image/jpeg,image/gif,image/png,image/x-eps"
                                            id="id_image2"
                                            name="image"
                                            multiple
                                        />
                    
                                        <div id="image-box2" class="image-container h-50 w-50"></div>
                                        <button
                                         class="btn btn-outline-info"
                                         id="crop-btn2"
                                         style="width: 100%; margin-top: 10px; display: none"
                                         type="button">
                                         Crop
                                        </button>
                    
                                    </div>
                                </div>
                                <!-- img2ends -->
                    
<!-- img1 -->
                <div class="form-group">
                    <label>Image 1</label>
                    <input type="file" name="image" class="file-upload-default" multiple />
                    <div class="input-group col-xs-12">
                        <input
                            class="form-control file-upload-info"
                            placeholder="Upload Image"
                            type="file"
                            accept="image/jpeg,image/gif,image/png,image/x-eps"
                            id="id_image3"
                            name="image"
                            multiple
                        />

                        <div id="image-box3" class="image-container h-50 w-50"></div>
                        <button
                         class="btn btn-outline-info"
                         id="crop-btn3"
                         style="width: 100%; margin-top: 10px; display: none"
                         type="button">
                         Crop
                        </button>
                    </div>
                </div>
    <!-- img1 End -->
                <div class="form-group">
                    <label for="">size</label>
                    <textarea class="form-control"  name="size"></textarea>
                </div>

                <div class="form-group">
                    <label for="">description</label>
                    <textarea class="form-control"  name="description"></textarea>
                </div>

                <div class="form-group">
                    <label for="">discount</label>
                    <input type="text" class="form-control" placeholder="Price" name="discount" />
                </div>

                <button type="submit" class="btn btn-primary me-2" id="confirm-btn">Submit</button>
                <button class="btn btn-light">Cancel</button>
            </form>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js" defer></script>
<script>
    // image-box is the id of the div element that will store our cropping image preview
    const imagebox3 = document.getElementById("image-box3");
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn3 = document.getElementById("crop-btn3");
    // id_image is the id of the input tag where we will upload the image
    const input3 = document.getElementById("id_image3");
    console.log("1")
  
    // When user uploads the image this event will get triggered
    input3.addEventListener("change", () => {
      // Getting image file object from the input variable
      const img_data = input3.files[0];
      console.log("2")
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url = URL.createObjectURL(img_data);
      console.log("3")
  
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox3.innerHTML = `<img src="${url}" id="image1" style="width:70%;">`;
  
      console.log("4")
  
      // Storing that cropping view image in a variable
      const image1 = document.getElementById("image1");
  
      // Displaying the image box
      document.getElementById("image-box3").style.display = "block";
      // Displaying the Crop buttton
      document.getElementById("crop-btn3").style.display = "block";
      // Hiding the Post button
      document.getElementById("confirm-btn").style.display = "none";
  
      // Creating a croper object with the cropping view image
      // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
      // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
      const cropper = new Cropper(image1, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 200,
        minCropBoxHeight: 200,
      });
      console.log("5")
  
      // When crop button is clicked this event will get triggered
      crop_btn3.addEventListener("click", () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement = document.getElementById("id_image3");
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file = new File([blob], img_data.name, {
            type: "image/",
            lastModified: new Date().getTime(),
          });
          console.log("6")
          // Create a new container
          let container = new DataTransfer();
          // Add the cropped image file to the container
          container.items.add(file);
          // Replace the original image file with the new cropped image file
          fileInputElement.files = container.files;
          console.log("7")
  
          // Hide the cropper box
          document.getElementById("image-box3").style.display = "none";
          // Hide the crop button
          document.getElementById("crop-btn3").style.display = "none";
          // Display the Post button
          document.getElementById("confirm-btn").style.display = "block";
        });
      });
    });
  </script>

<script>
  // image-box is the id of the div element that will store our cropping image preview
  const imagebox2 = document.getElementById("image-box2");
  // crop-btn is the id of button that will trigger the event of change original file with cropped file.
  const crop_btn2 = document.getElementById("crop-btn2");
  // id_image is the id of the input tag where we will upload the image
  const input2 = document.getElementById("id_image2");
  console.log("1")

  // When user uploads the image this event will get triggered
  input2.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data = input2.files[0];
    console.log("2")
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url = URL.createObjectURL(img_data);
    console.log("3")

    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url}" id="image1" style="width:70%;">`;
    
    console.log("4")

    // Storing that cropping view image in a variable
    const image1 = document.getElementById("image1");

    // Displaying the image box
    document.getElementById("image-box2").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn2").style.display = "block";
    // Hiding the Post button
    document.getElementById("confirm-btn").style.display = "none";

    // Creating a croper object with the cropping view image
    // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
    // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
    const cropper = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 200,
      minCropBoxHeight: 200,
    });
    console.log("5")

    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement = document.getElementById("id_image2");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file = new File([blob], img_data.name, {
          type: "image/",
          lastModified: new Date().getTime(),
        });
        console.log("6")
        // Create a new container
        let container = new DataTransfer();
        // Add the cropped image file to the container
        container.items.add(file);
        // Replace the original image file with the new cropped image file
        fileInputElement.files = container.files;
        console.log("7")

        // Hide the cropper box
        document.getElementById("image-box2").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn2").style.display = "none";
        // Display the Post button
        document.getElementById("confirm-btn").style.display = "block";
      });
    });
  });
</script>

<script>
    // image-box is the id of the div element that will store our cropping image preview
    const imagebox = document.getElementById("image-box");
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn = document.getElementById("crop-btn");
    // id_image is the id of the input tag where we will upload the image
    const input = document.getElementById("id_image");
    console.log("1")
    
    // When user uploads the image this event will get triggered
    input.addEventListener("change", () => {
        // Getting image file object from the input variable
        const img_data = input.files[0];
        console.log("2")
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url = URL.createObjectURL(img_data);
      console.log("3")
  
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox.innerHTML = `<img src="${url}" id="image1" style="width:70%;">`;
  
      console.log("4")
  
      // Storing that cropping view image in a variable
      const image1 = document.getElementById("image1");
  
      // Displaying the image box
      document.getElementById("image-box").style.display = "block";
      // Displaying the Crop buttton
      document.getElementById("crop-btn").style.display = "block";
      // Hiding the Post button
      document.getElementById("confirm-btn").style.display = "none";
  
      // Creating a croper object with the cropping view image
      // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
      // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
      const cropper = new Cropper(image1, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 200,
        minCropBoxHeight: 200,
      });
      console.log("5")
  
      // When crop button is clicked this event will get triggered
      crop_btn.addEventListener("click", () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement = document.getElementById("id_image");
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file = new File([blob], img_data.name, {
            type: "image/",
            lastModified: new Date().getTime(),
          });
          console.log("6")
          // Create a new container
          let container = new DataTransfer();
          // Add the cropped image file to the container
          container.items.add(file);
          // Replace the original image file with the new cropped image file
          fileInputElement.files = container.files;
          console.log("7")
  
          // Hide the cropper box
          document.getElementById("image-box").style.display = "none";
          // Hide the crop button
          document.getElementById("crop-btn").style.display = "none";
          // Display the Post button
          document.getElementById("confirm-btn").style.display = "block";
        });
      });
    });
  </script>


<%- include('partials/Footer.ejs') -%>
